// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WriteAndReadWebApplicationMVC;

#nullable disable

namespace WriteAndReadWebApplicationMVC.Migrations
{
    [DbContext(typeof(DbWriteAndReadContext))]
    [Migration("20251004102834_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Block", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("blockEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("blockStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("authorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Chapter", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderInBook")
                        .HasColumnType("int");

                    b.Property<int>("readCounter")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uniqueReadCounter")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("chapterId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<DateTime>("writeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("chapterId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Readed", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("chapterId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("chapterId");

                    b.HasIndex("userId");

                    b.ToTable("Readed");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Block", b =>
                {
                    b.HasOne("WriteAndReadWebApplicationMVC.Models.User", "user")
                        .WithMany("blocks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Book", b =>
                {
                    b.HasOne("WriteAndReadWebApplicationMVC.Models.User", "author")
                        .WithMany("mybooks")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Chapter", b =>
                {
                    b.HasOne("WriteAndReadWebApplicationMVC.Models.Book", "book")
                        .WithMany("chapters")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Comment", b =>
                {
                    b.HasOne("WriteAndReadWebApplicationMVC.Models.Chapter", "chapter")
                        .WithMany("comments")
                        .HasForeignKey("chapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WriteAndReadWebApplicationMVC.Models.User", "user")
                        .WithMany("comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chapter");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Readed", b =>
                {
                    b.HasOne("WriteAndReadWebApplicationMVC.Models.Chapter", "chapter")
                        .WithMany("readers")
                        .HasForeignKey("chapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WriteAndReadWebApplicationMVC.Models.User", "user")
                        .WithMany("readed")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chapter");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Book", b =>
                {
                    b.Navigation("chapters");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.Chapter", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("readers");
                });

            modelBuilder.Entity("WriteAndReadWebApplicationMVC.Models.User", b =>
                {
                    b.Navigation("blocks");

                    b.Navigation("comments");

                    b.Navigation("mybooks");

                    b.Navigation("readed");
                });
#pragma warning restore 612, 618
        }
    }
}
